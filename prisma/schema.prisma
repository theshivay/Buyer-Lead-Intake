// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          UserRole @default(USER)

  buyers        Buyer[]
  buyerHistory  BuyerHistory[] @relation("ChangedBy")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Buyer {
  id           String        @id @default(uuid())
  fullName     String
  email        String?
  phone        String
  city         City
  propertyType PropertyType
  bhk          BHK?
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     Timeline
  source       Source
  status       Status        @default(New)
  notes        String?
  tags         String      @default("")    // Store as comma-separated values
  
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id])
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  history      BuyerHistory[]

  @@index([fullName])
  @@index([phone])
  @@index([email])
  @@index([ownerId])
  @@index([status])
  @@map("buyers")
}

model BuyerHistory {
  id          String   @id @default(uuid())
  buyerId     String
  buyer       Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  changedById String
  changedBy   User     @relation("ChangedBy", fields: [changedById], references: [id])
  changedAt   DateTime @default(now())
  diff        Json

  @@index([buyerId])
  @@map("buyer_history")
}

enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum BHK {
  Studio
  One
  Two
  Three
  Four
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ZeroToThreeMonths @map("0-3m")
  ThreeToSixMonths  @map("3-6m")
  MoreThanSixMonths @map(">6m")
  Exploring
}

enum Source {
  Website
  Referral
  WalkIn   @map("Walk-in")
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}

// Next Auth Models
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
